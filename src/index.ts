import "@logseq/libs" //https://plugins-doc.logseq.com/
import { EntityID, LSPluginBaseInfo, PageEntity } from "@logseq/libs/dist/LSPlugin.user"
import { setup as l10nSetup } from "logseq-l10n" //https://github.com/sethyuan/logseq-l10n
import { behindJournalTitle } from "./behind"
import { boundariesProcess } from "./boundaries"
import { getHolidaysBundle, removeHolidaysBundle } from "./holidays"
import { convertLanguageCodeToCountryCode, getJournalDayDate, removeProvideStyle } from "./lib"
import fileMainCSS from "./main.css?inline"
import { currentPageIsMonthlyJournal } from "./monthlyJournal"
import { currentPageIsQuarterlyJournal } from "./quarterlyJournal"
import { settingsTemplate } from "./settings"
import { loadShortcutItems, } from "./shortcutItems"
import af from "./translations/af.json"
import de from "./translations/de.json"
import es from "./translations/es.json"
import fr from "./translations/fr.json"
import id from "./translations/id.json"
import it from "./translations/it.json"
import ja from "./translations/ja.json"
import ko from "./translations/ko.json"
import nbNO from "./translations/nb-NO.json"
import nl from "./translations/nl.json"
import pl from "./translations/pl.json"
import ptBR from "./translations/pt-BR.json"
import ptPT from "./translations/pt-PT.json"
import ru from "./translations/ru.json"
import sk from "./translations/sk.json"
import tr from "./translations/tr.json"
import uk from "./translations/uk.json"
import zhCN from "./translations/zh-CN.json"
import zhHant from "./translations/zh-Hant.json"
import CSSThisWeekPopup from "./weeklyEmbed.css?inline"
import { currentPageIsWeeklyJournal } from "./weeklyJournal"
const keyThisWeekPopup = "weeklyEmbed"
let configPreferredLanguage: string
let configPreferredDateFormat: string
export const getConfigPreferredLanguage = (): string => configPreferredLanguage
export const getConfigPreferredDateFormat = (): string => configPreferredDateFormat
let processingSettingsChanged: boolean = false

const weeklyEmbed = () => logseq.provideStyle({ key: keyThisWeekPopup, style: CSSThisWeekPopup })

const getUserConfig = async () => {
  const { preferredLanguage, preferredDateFormat } = await logseq.App.getUserConfigs() as { preferredDateFormat: string; preferredLanguage: string }
  configPreferredLanguage = preferredLanguage
  configPreferredDateFormat = preferredDateFormat
  getHolidaysBundle(preferredLanguage)
}


/* main */
const main = async () => {
  await l10nSetup({
    builtinTranslations: {//Full translations
      ja, af, de, es, fr, id, it, ko, "nb-NO": nbNO, nl, pl, "pt-BR": ptBR, "pt-PT": ptPT, ru, sk, tr, uk, "zh-CN": zhCN, "zh-Hant": zhHant
    }
  })

  // „É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã
  const notice = "20240519no02"
  if (logseq.settings!.weekNumberFormat !== undefined
    && logseq.settings!.notice !== notice) {
    logseq.updateSettings({ notice })
    setTimeout(() => {
      logseq.UI.showMsg(`

    üìÜ"Show weekday and week-number" plugin
    Updated!
    

    Feature:
    1. Week-number format options
    2. Monthly Journal (Insert Template)
    3. Quarterly Journal (Insert Template)
    4. (Weekly/M/Q) Journal Nav link

    - New setting items have been added in the plugin settings.


    Bug fix:
    1. Show indicator (dot) of journal entries
      (‚ö†Ô∏èDue to changes in the specifications of Logseq app, judgments are made based on the database rather than the file.)
    
    `, "info", { timeout: 8500 })
      logseq.showSettingsUI() // Ë®≠ÂÆöÁîªÈù¢„ÇíË°®Á§∫„Åô„Çã
    }, 5000)
  }

  // ÂàùÂõûËµ∑ÂãïÊôÇ„Å´Ë®≠ÂÆö„Çí‰øÉ„Åô
  setTimeout(() => {
    if (logseq.settings!.weekNumberFormat === undefined) {
      logseq.UI.showMsg("Select either \"US format\" or \"ISO format\"", "info", { timeout: 3000 })
      setTimeout(() => logseq.showSettingsUI(), 300)
    }
  }, 3000)

  logseq.provideStyle({ key: "main", style: fileMainCSS })


  await getUserConfig()

  if (logseq.settings!.holidaysCountry === undefined)
    logseq.useSettingsSchema(
      settingsTemplate(
        convertLanguageCodeToCountryCode(configPreferredLanguage)
      )
    )
  else
    logseq.useSettingsSchema(settingsTemplate(logseq.settings!.holidaysCountry))

  //Logseq„ÇíÈñã„ÅÑ„Åü„Å®„Åç„Å´ÂÆüË°å
  setTimeout(() => {
    if (logseq.settings!.booleanJournalsBoundaries === true)
      boundaries("journals")
    querySelectorAllTitle()
  }, 200)
  setTimeout(() => observerMain(), 2000) //„Çπ„ÇØ„É≠„Éº„É´Áî®


  //„Éö„Éº„Ç∏ÈÅ∑ÁßªÊôÇ„Å´ÂÆüË°å (Journal boundaries„Å®Behind Journal Title„ÅÆÊõ¥Êñ∞)
  logseq.App.onRouteChanged(({ template }) => {
    if (logseq.settings!.booleanBoundaries === true
      && template === "/page/:name")
      //page only
      //div.is-journals
      setTimeout(() => boundaries("is-journals"), 20)
    else
      if (logseq.settings!.booleanJournalsBoundaries === true
        && template === "/")
        //journals only
        //div#journals
        setTimeout(() => boundaries("journals"), 20)

    setTimeout(() => querySelectorAllTitle(), 50)
  })

  // ‰ªäÊó•„ÅÆÊó•Ë®ò„Åå‰ΩúÊàê„Åï„Çå„Åü„Å®„Åç„Å´ÂÆüË°å„Åï„Çå„Çã (Journal boundaries„ÅÆÊõ¥Êñ∞„ÅÆ„Åü„ÇÅ) ‚Äª„Åü„Å†„Åó„ÄÅ‰ªäÊó•‰ª•Â§ñ„ÅÆÊó•Ë®ò„Çí‰ΩúÊàê„Åó„ÅüÂ†¥Âêà„ÅØÂÆüË°å„Åï„Çå„Å™„ÅÑ„ÅÆ„ÅßÊ≥®ÊÑè
  logseq.App.onTodayJournalCreated(async () => {
    if (logseq.settings!.booleanBoundaries === true) {
      const weekBoundaries = parent.document.getElementById("weekBoundaries") as HTMLDivElement | null
      if (weekBoundaries) weekBoundaries.remove()
      if ((await logseq.Editor.getCurrentPage() as { id: EntityID } | null) !== null)
        //page only
        //div.is-journals
        setTimeout(() => boundaries("is-journals"), 10)
      else
        //journals only
        //div#journals
        setTimeout(() => boundaries("journals"), 10)
    }
  })

  // „Çµ„Ç§„Éâ„Éê„Éº„ÅÆË°®Á§∫/ÈùûË°®Á§∫„ÅåÂàá„ÇäÊõø„Çè„Å£„Åü„Å®„Åç„Å´„Çª„É¨„ÇØ„Çø„Éº„ÇØ„Ç®„É™„ÇíÂÆüË°å
  logseq.App.onSidebarVisibleChanged(({ visible }) => {
    if (visible === true)
      setTimeout(() => querySelectorAllTitle(), 100)
  })

  // CSSÈÅ©Áî®
  if (logseq.settings!.weeklyEmbed === true) weeklyEmbed()
  if (logseq.settings!.boundariesBottom === true) parent.document.body.classList!.add("boundaries-bottom")

  // „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å
  onSettingsChanged()

  // „Éó„É©„Ç∞„Ç§„É≥„Ç™„ÉïÊôÇ„Å´ÂÆüË°å
  logseq.beforeunload(async () => {
    removeTitleQuery()
    removeBoundaries()
    observer.disconnect()
  })

  // „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„Éº„ÇíÁôªÈå≤
  loadShortcutItems()

} /* end_main */



let processingRenamePage: boolean = false

// „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´ÂÆüË°å
const onSettingsChanged = () => logseq.onSettingsChanged((newSet: LSPluginBaseInfo["settings"], oldSet: LSPluginBaseInfo["settings"]) => {
  if ((oldSet.booleanBoundaries === true
    && newSet.booleanBoundaries === false)
    || (oldSet.booleanJournalsBoundaries === true
      && newSet.booleanJournalsBoundaries === false
      && parent.document.getElementById("journals") as Node)
  ) removeBoundaries() //boundaries„ÇíÂâäÈô§„Åô„Çã
  else
    if (oldSet.booleanBoundaries === false
      && newSet.booleanBoundaries === true)
      SettingsChangedJournalBoundariesEnable()//Journal boundaries„ÇíË°®Á§∫„Åô„Çã
    else
      if (oldSet.booleanJournalsBoundaries === false
        && newSet.booleanJournalsBoundaries === true
        && parent.document.getElementById("journals") as Node)
        boundaries("journals")//Êó•Ë™å„ÅÆÂ†¥Âêà„ÅÆ„Åø

  if (oldSet.boundariesWeekStart !== newSet.boundariesWeekStart
    || oldSet.localizeOrEnglish !== newSet.localizeOrEnglish
    || oldSet.weekNumberFormat !== newSet.weekNumberFormat
    || oldSet.booleanBoundariesFuturePage !== newSet.booleanBoundariesFuturePage
    || oldSet.booleanBoundariesShowMonth !== newSet.booleanBoundariesShowMonth
    || oldSet.booleanBoundariesShowWeekNumber !== newSet.booleanBoundariesShowWeekNumber
    || oldSet.booleanWeekendsColor !== newSet.booleanWeekendsColor
    || oldSet.boundariesHighlightColorSinglePage !== newSet.boundariesHighlightColorSinglePage
    || oldSet.boundariesHighlightColorToday !== newSet.boundariesHighlightColorToday
    || oldSet.booleanWeeklyJournal !== newSet.booleanWeeklyJournal
    || oldSet.booleanBoundariesIndicator !== newSet.booleanBoundariesIndicator
    || oldSet.booleanBoundariesHolidays !== newSet.booleanBoundariesHolidays
    || oldSet.holidaysCountry !== newSet.holidaysCountry
    || oldSet.holidaysState !== newSet.holidaysState
    || oldSet.holidaysRegion !== newSet.holidaysRegion
    || oldSet.choiceHolidaysColor !== newSet.choiceHolidaysColor
    || oldSet.booleanLunarCalendar !== newSet.booleanLunarCalendar
    || oldSet.weekNumberOptions !== newSet.weekNumberOptions) {
    //Journal boundaries„ÇíÂÜçË°®Á§∫„Åô„Çã
    removeBoundaries()
    SettingsChangedJournalBoundariesEnable()
  }

  if (oldSet.localizeOrEnglish !== newSet.localizeOrEnglish
    || oldSet.booleanDayOfWeek !== newSet.booleanDayOfWeek
    || oldSet.longOrShort !== newSet.longOrShort
    || oldSet.booleanWeekNumber !== newSet.booleanWeekNumber
    || oldSet.weekNumberOfTheYearOrMonth !== newSet.weekNumberOfTheYearOrMonth
    || oldSet.booleanWeekendsColor !== newSet.booleanWeekendsColor
    || oldSet.weekNumberFormat !== newSet.weekNumberFormat
    || oldSet.booleanRelativeTime !== newSet.booleanRelativeTime
    || oldSet.booleanWeeklyJournal !== newSet.booleanWeeklyJournal
    || oldSet.booleanWeekNumberHideYear !== newSet.booleanWeekNumberHideYear
    || oldSet.booleanSettingsButton !== newSet.booleanSettingsButton
    || oldSet.booleanMonthlyJournalLink !== newSet.booleanMonthlyJournalLink
    || oldSet.holidaysCountry !== newSet.holidaysCountry
    || oldSet.holidaysState !== newSet.holidaysState
    || oldSet.holidaysRegion !== newSet.holidaysRegion
    || oldSet.choiceHolidaysColor !== newSet.choiceHolidaysColor
    || oldSet.booleanUnderLunarCalendar !== newSet.booleanUnderLunarCalendar
    || oldSet.underHolidaysAlert !== newSet.underHolidaysAlert
    || oldSet.weekNumberOptions !== newSet.weekNumberOptions) {
    //ÂÜçË°®Á§∫ Behind Journal Title
    removeTitleQuery()
    setTimeout(() => querySelectorAllTitle(), 500)
  }

  // weeklyEmbed
  if (oldSet.weeklyEmbed !== newSet.weeklyEmbed)
    if (newSet.weeklyEmbed === true)
      weeklyEmbed()
    else
      removeProvideStyle(keyThisWeekPopup)

  //weeklyJournalHeadlineProperty
  if (oldSet.weeklyJournalHeadlineProperty !== newSet.weeklyJournalHeadlineProperty
    && oldSet.weeklyJournalHeadlineProperty !== ""
    && newSet.weeklyJournalHeadlineProperty !== "") //Á©∫ÁôΩ„ÅÆÂ†¥Âêà„ÅØÂÆüË°å„Åó„Å™„ÅÑ
    logseq.Editor.renamePage(oldSet.weeklyJournalHeadlineProperty as string, newSet.weeklyJournalHeadlineProperty as string) //„Éö„Éº„Ç∏Âêç„ÇíÂ§âÊõ¥„Åô„Çã

  //20240108 boundaries„Çí‰∏ãÂÅ¥„Å´Ë°®Á§∫„Åô„Çã
  if (oldSet.boundariesBottom !== newSet.boundariesBottom)
    if (newSet.boundariesBottom === true)
      parent.document.body.classList!.add("boundaries-bottom")
    else
      parent.document.body.classList!.remove("boundaries-bottom")


  // 20240121 Á•ùÊó•Ë°®Á§∫„Å´Èñ¢„Åô„Çã„Éà„Ç∞„É´
  if (oldSet.booleanBoundariesHolidays !== newSet.booleanBoundariesHolidays
    || oldSet.underHolidaysAlert !== newSet.underHolidaysAlert)
    if (newSet.booleanBoundariesHolidays === true
      || newSet.underHolidaysAlert === true) //„Å©„Å°„Çâ„Åã„Åå„Ç™„É≥„ÅÆÂ†¥Âêà
      getHolidaysBundle(newSet.holidaysCountry as string, { settingsChanged: true }) //„Éê„É≥„Éâ„É´„ÇíÂèñÂæó„Åô„Çã
    else
      if (newSet.booleanBoundariesHolidays === false
        && newSet.underHolidaysAlert === false) //‰∏°Êñπ„Ç™„Éï„ÅÆÂ†¥Âêà
        removeHolidaysBundle() //„Éê„É≥„Éâ„É´„ÇíÂâäÈô§„Åô„Çã

  if (oldSet.holidaysCountry !== newSet.holidaysCountry
    || oldSet.holidaysState !== newSet.holidaysState
    || oldSet.holidaysRegion !== newSet.holidaysRegion)  //ÂõΩÂêç„Å™„Å©„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà
    getHolidaysBundle(newSet.holidaysCountry as string, { settingsChanged: true }) //„Éê„É≥„Éâ„É´„ÇíÂèñÂæó„Åô„Çã

  // ÈÄ±Áï™Âè∑„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÂ§âÊõ¥„Åô„Çã
  if ((oldSet.weekNumberChangeQ === false && newSet.weekNumberChangeQ === true)
    || (oldSet.weekNumberChangeQS === false && newSet.weekNumberChangeQS === true)
    || (oldSet.weekNumberChangeRevert === false && newSet.weekNumberChangeRevert === true)) {

    const changeWeekNumberToQuarterly = async (separateString: string, revert: boolean) => {
      if (processingRenamePage) return
      processingRenamePage = true
      //logseq.Editor.renamePage("2023-W01", "2023/Q1/W01") „ÅÆ„Çà„ÅÜ„Å´„Åó„Å¶„ÄÅÂõõÂçäÊúü„ÇíÂÖ•„Çå„Å¶„Åª„Åó„ÅÑ 2023-W01„Åã„ÇâW53„Åæ„Åß„Å®2024-W01„Åã„ÇâW53„Åæ„Åß„ÄÇ
      const targetList = ["2022", "2023", "2024", "2025"]
      const targetList2 = ["Q1", "Q2", "Q3", "Q4", "Q4"]
      targetList.forEach((year) => {
        const weekList = Array.from({ length: 53 }, (_, i) => i + 1)
        weekList.forEach((week) => {
          const weekNumber = week.toString().padStart(2, "0")
          if (revert === true) {
            const weekNumberQuarter = targetList2[Math.floor((week - 1) / 13)]
            logseq.Editor.getPage(`${year}/${weekNumberQuarter}/W${weekNumber}`).then((page: { uuid: PageEntity["uuid"] } | null) => {
              if (page) {
                logseq.Editor.renamePage(`${year}/${weekNumberQuarter}/W${weekNumber}`, `${year}${separateString}W${weekNumber}`)
                console.log(`Page ${year}/${weekNumberQuarter}/W${weekNumber} has been renamed to ${year}${separateString}W${weekNumber}.`)
              } else
                console.log(`Page ${year}/${weekNumberQuarter}/W${weekNumber} does not exist.`)
            })
          } else {
            logseq.Editor.getPage(`${year}${separateString}W${weekNumber}`).then((page: { uuid: PageEntity["uuid"] } | null) => {
              if (page) {
                //ÂõõÂçä‰∏ñÁ¥Ä„ÇíÂÖ•„Çå„Çã
                const weekNumberQuarter = targetList2[Math.floor((week - 1) / 13)]
                logseq.Editor.renamePage(`${year}${separateString}W${weekNumber}`, `${year}/${weekNumberQuarter}/W${weekNumber}`)
                console.log(`Page ${year}${separateString}W${weekNumber} has been renamed to ${year}/${weekNumberQuarter}/W${weekNumber}.`)
              } else
                console.log(`Page ${year}${separateString}W${weekNumber} does not exist.`)
            })
          }
        })
      })
      logseq.UI.showMsg("Week number has been changed to the quarterly format.", "info", { timeout: 5000 })
      setTimeout(() => {
        processingRenamePage = false
        logseq.updateSettings({ weekNumberChangeQ: false })
      }, 2000)
    }

    if (oldSet.weekNumberChangeQ === false && newSet.weekNumberChangeQ === true)
      changeWeekNumberToQuarterly("-", false) //2023-W01„Åã„ÇâW53„Åæ„Åß„Å®2024-W01„Åã„ÇâW53„Åæ„Åß„ÄÇ
    else
      if (oldSet.weekNumberChangeQS === false && newSet.weekNumberChangeQS === true)
        changeWeekNumberToQuarterly("/", false) //2023/W01„Åã„ÇâW53„Åæ„Åß„Å®2024/W01„Åã„ÇâW53„Åæ„Åß„ÄÇ
      else
        if (oldSet.weekNumberChangeRevert === false && newSet.weekNumberChangeRevert === true)
          changeWeekNumberToQuarterly("/", true) //2023/Q1/W01„Åã„ÇâQ4/W53„Åæ„Åß„Å®2024/Q1/W01„Åã„ÇâQ4/W53„Åæ„Åß„ÄÇ
  }

  if (oldSet.weekNumberChangeSlash === false && newSet.weekNumberChangeSlash === true) {
    if (processingRenamePage) return
    processingRenamePage = true
    //logseq.Editor.renamePage("2023-W01", "2023/W01") „ÅÆ„Çà„ÅÜ„Å´„Åó„Å¶-„Çí/„Å´„Åó„Å¶„Åª„Åó„ÅÑ„ÄÇ2023-W01„Åã„ÇâW53„Åæ„Åß„Å®2024-W01„Åã„ÇâW53„Åæ„Åß„ÄÇ
    const targetList = ["2022", "2023", "2024", "2025"]
    targetList.forEach((year) => {
      const weekList = Array.from({ length: 53 }, (_, i) => i + 1)
      weekList.forEach((week) => {
        const weekNumber = week.toString().padStart(2, "0")
        logseq.Editor.getPage(`${year}-W${weekNumber}`).then((page: { uuid: PageEntity["uuid"] } | null) => {
          if (page) {
            logseq.Editor.renamePage(`${year}-W${weekNumber}`, `${year}/W${weekNumber}`)
            console.log(`Page ${year}-W${weekNumber} has been renamed to ${year}/W${weekNumber}.`)
          } else
            console.log(`Page ${year}-W${weekNumber} does not exist.`)
        })
      })
    })
    logseq.UI.showMsg("Week number has been changed to the quarterly format.", "info", { timeout: 5000 })
    setTimeout(() => {
      processingRenamePage = false
      logseq.updateSettings({ weekNumberChangeSlash: false })
    }, 2000)
  }

  //CAUTION: Êó•‰ªòÂΩ¢Âºè„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„ÄÅre-index„Çí„Åä„Åì„Å™„ÅÜ„ÅÆ„Åß„ÄÅÂïèÈ°å„Å™„ÅÑ„Åå„ÄÅË®ÄË™ûË®≠ÂÆö„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆË®≠ÂÆö„ÅØ„ÄÅ„Åô„Åê„Å´„ÅØÂèçÊò†„Åï„Çå„Å™„ÅÑ„ÄÇ„Éó„É©„Ç∞„Ç§„É≥„ÅÆÂÜçË™≠„ÅøËæº„Åø„ÅåÂøÖË¶Å„Å´„Å™„Çã„Åå„ÄÅ„Åù„ÅÆÈ†ªÂ∫¶„Åå„Åã„Å™„ÇäÂ∞ë„Å™„ÅÑ„ÅÆ„ÅßÂïèÈ°å„Å™„ÅÑ„ÄÇ
  if (processingSettingsChanged) return
  processingSettingsChanged = true
  getUserConfig()
  setTimeout(() => processingSettingsChanged === false, 1000)
}) // end_onSettingsChanged


//Journal boundaries„ÇíË°®Á§∫„Åô„Çã Ë®≠ÂÆöÂ§âÊõ¥ÊôÇ„Å´ÂÆüË°å
const SettingsChangedJournalBoundariesEnable = () =>
  setTimeout(() =>
    boundaries(parent.document.getElementById("journals") as Node ?
      "journals"
      : "is-journals")
    , 100)


// „ÇØ„Ç®„É™„Éº„Çª„É¨„ÇØ„Çø„Éº„Åß„Çø„Ç§„Éà„É´„ÇíÂèñÂæó„Åô„Çã
let processingTitleQuery: boolean = false
const querySelectorAllTitle = async (enable?: boolean): Promise<void> => {
  if (processingTitleQuery
    && !enable) return
  processingTitleQuery = true

  //Journals„ÅÆÂ†¥Âêà„ÅØË§áÊï∞
  parent.document.body.querySelectorAll("div#main-content-container div:is(.journal,.is-journals,.page) h1.title:not([data-checked])")
    .forEach(async (titleElement) => await JournalPageTitle(titleElement as HTMLElement))
  processingTitleQuery = false
}

// observer
const observer = new MutationObserver(async (): Promise<void> => {
  observer.disconnect()
  await querySelectorAllTitle(true)
  setTimeout(() => observerMain(), 800)
})

const observerMain = () => observer.observe(
  parent.document.getElementById("main-content-container") as HTMLDivElement,
  {
    attributes: true,
    subtree: true,
    attributeFilter: ["class"],
  }
)

//Credit: ottodevs  https://discuss.logseq.com/t/show-week-day-and-week-number/12685/18
let processingJournalTitlePage: Boolean = false

const JournalPageTitle = async (titleElement: HTMLElement) => {
  if (!titleElement.textContent
    || processingJournalTitlePage === true
    || titleElement.nextElementSibling?.className === "showWeekday") return // check if element already has date info
  processingJournalTitlePage = true

  const title: string = titleElement.dataset.localize === "true" ?
    titleElement.dataset.ref || ""
    : titleElement.dataset.ref || titleElement.textContent
  if (title === "") return //„Çø„Ç§„Éà„É´„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã

  //Weekly(M/Q) Journal„ÅÆ„Éö„Éº„Ç∏„Åã„Å©„ÅÜ„Åã
  if (titleElement.classList.contains("journal-title") === false
    && titleElement.classList.contains("title") === true
    // title„ÅÆÂÖàÈ†≠„Åå2024„Åã„ÇâÂßã„Åæ„Çã„Åã„Å©„ÅÜ„Åã
    && title.match(/^(\d{4})/) !== null
  ) {
    // 2024/01„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„Åã„Å©„ÅÜ„Åã
    if (logseq.settings!.booleanMonthlyJournal === true) {
      const match = title.match(/^(\d{4})\/(\d{2})$/) as RegExpMatchArray
      if (match
        && match[1] !== ""
        && match[2] !== "") {
        await currentPageIsMonthlyJournal(titleElement, match)
        titleElement.title = "Monthly Journal"
        titleElement.dataset.checked = "true"
        setTimeout(() =>
          processingJournalTitlePage = false
          , 300)
        return //Âá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã
      }
    }
    // 2024/Q1„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„Åã„Å©„ÅÜ„Åã
    if (logseq.settings!.booleanQuarterlyJournal === true) {
      const match = title.match(/^(\d{4})\/[qQ](\d{1})$/) as RegExpMatchArray
      if (match
        && match[1] !== ""
        && match[2] !== "") {
        await currentPageIsQuarterlyJournal(titleElement, match)
        titleElement.title = "Quarterly Journal"
        titleElement.dataset.checked = "true"
        setTimeout(() =>
          processingJournalTitlePage = false
          , 300)
        return //Âá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã
      }
    }
    if (logseq.settings!.booleanWeeklyJournal === true) {
      const match = (() => {
        switch (logseq.settings!.weekNumberOptions) {
          case "YYYY-Www":
            return title.match(/^(\d{4})-[wW](\d{2})$/) // "YYYY-Www"
          case "YYYY/qqq/Www": // 2023/Q1/W01
            return title.match(/^(\d{4})\/[qQ]\d{1}\/[wW](\d{2})$/) // "YYYY/qqq/Www"
          default:
            return title.match(/^(\d{4})\/[wW](\d{2})$/) // "YYYY/Www"
        }
      })() as RegExpMatchArray
      if (match
        && match[1] !== ""
        && match[2] !== "") {
        await currentPageIsWeeklyJournal(titleElement, match)
        titleElement.title = "Weekly Journal"
        titleElement.dataset.checked = "true"
        setTimeout(() =>
          processingJournalTitlePage = false
          , 300)
        return //Âá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã
      }
    }
  }

  //Ë®≠ÂÆöÈ†ÖÁõÆ„Åß„Åô„Åπ„Å¶„ÅÆ„Éà„Ç∞„É´„Åå„Ç™„Éï„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ
  if (logseq.settings!.booleanWeekNumber === false
    && logseq.settings!.booleanDayOfWeek === false
    && logseq.settings!.booleanRelativeTime === false
    && logseq.settings!.underHolidaysAlert === false
    && logseq.settings!.booleanSettingsButton === false
    && logseq.settings!.booleanMonthlyJournalLink === false
    && logseq.settings!.booleanUnderLunarCalendar === false
    && (titleElement.classList.contains("journal-title") === true
      || titleElement.classList.contains("title") === true)) {
    //titleElement„ÅÆÂæå„Çç„Å´dateInfoElement„ÇíËøΩÂä†„Åó„ÄÅ„Çπ„Éö„Éº„ÇπÁ¢∫‰øù„Åó„Å¶„Åä„Åè
    const dateInfoElement: HTMLSpanElement = document.createElement("span")
    dateInfoElement.classList.add("showWeekday")
    titleElement.insertAdjacentElement("afterend", dateInfoElement)
    const secondElement: HTMLSpanElement = document.createElement("span")
    secondElement.style.width = "50%"
    titleElement.parentElement!.insertAdjacentElement("afterend", secondElement)
    titleElement.dataset.checked = "true"
    return //Âá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã
  }

  // ÈÅÖÂª∂Âá¶ÁêÜ
    setTimeout(async () => {
      const page = (await logseq.Editor.getPage(title)) as { journalDay: number } | null
      if (page
        && page.journalDay) {
        const journalDate: Date = getJournalDayDate(String(page.journalDay))

        behindJournalTitle(journalDate, titleElement, configPreferredDateFormat)
      }
    }, 10)

  titleElement.dataset.checked = "true"
  processingJournalTitlePage = false //Journals„ÅÆÂ†¥Âêà„ÅØË§áÊï∞
}

const removeBoundaries = () => {
  const weekBoundaries = parent.document.getElementById("weekBoundaries") as HTMLDivElement | null
  if (weekBoundaries) weekBoundaries.remove()
}

const removeTitleQuery = () => {
  const titleBehindElements = parent.document.body.querySelectorAll("div#main-content-container div:is(.journal,.is-journals) h1.title+span.showWeekday") as NodeListOf<HTMLElement>
  titleBehindElements.forEach((titleElement) => titleElement.remove())
  const titleElements = parent.document.body.querySelectorAll("div#main-content-container div:is(.journal,.is-journals) h1.title[data-checked]") as NodeListOf<HTMLElement>
  titleElements.forEach((titleElement) => titleElement.removeAttribute("data-checked"))
}

//boundaries
let processingBoundaries: boolean = false
export const boundaries = (targetElementName: string, remove?: boolean) => {
  if (processingBoundaries) return
  processingBoundaries = true
  boundariesProcess(targetElementName, remove ? remove : false, 0)
  processingBoundaries = false
}


logseq.ready(main).catch(console.error)